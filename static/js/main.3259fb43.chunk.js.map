{"version":3,"sources":["components/UI/Button.js","components/Search.js","store/actions/actions.js","store/actions/actionTypes.js","components/UI/Spinner.js","components/error/Backdrop.js","components/error/ErrorWindow.js","components/SearchResult.js","components/SavedQueries.js","App.js","serviceWorker.js","store/util.js","store/reducers/reducer.js","index.js"],"names":["Button","props","type","onClick","clicked","style","add","children","connect","state","keyword","dispatch","onFetchImages","url","process","axios","get","then","response","data","results","length","images","catch","error","actions","onSetKeyword","onSaveQuery","useEffect","className","placeholder","value","onChange","event","target","changeHandler","onKeyPress","key","handleEnter","marginRight","Spinner","onLeaveErrorMessage","loading","result","map","item","id","href","user","links","html","src","urls","regular","alt","alt_description","name","savedQueries","onFetchSavedQuery","query","photos","App","SearchResult","Boolean","window","location","hostname","match","updateObject","oldObject","valueToUpdate","initialState","reducer","action","toUpperCase","composeEnhancers","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3259fb43.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Button = props => (\r\n  <button type=\"submit\" onClick={props.clicked} style={{ ...props.add }}>\r\n    {props.children}\r\n  </button>\r\n);\r\n\r\nexport default Button;\r\n","import React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport * as actions from \"../store/actions\";\r\nimport Button from \"./UI/Button\";\r\n\r\nconst Search = props => {\r\n  const { onFetchImages } = props;\r\n  useEffect(() => {\r\n    onFetchImages(props.keyword);\r\n  }, [onFetchImages]);\r\n\r\n  const handleEnter = event => {\r\n    if (event.key === \"Enter\") {\r\n      onFetchImages(props.keyword);\r\n    }\r\n  };\r\n\r\n  const changeHandler = event => {\r\n    props.onSetKeyword(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"search\">\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Search photos\"\r\n        value={props.keyword}\r\n        onChange={event => changeHandler(event)}\r\n        onKeyPress={event => handleEnter(event)}\r\n      />\r\n      <div className=\"buttons\">\r\n        <Button\r\n          add={{ marginRight: \"10px\" }}\r\n          clicked={() => onFetchImages(props.keyword)}\r\n        >\r\n          Search\r\n        </Button>\r\n        <Button clicked={() => props.onSaveQuery()}>Save</Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    keyword: state.keyword\r\n  };\r\n};\r\nconst mapDispatcToProps = dispatch => {\r\n  return {\r\n    onFetchImages: keyword => dispatch(actions.initFetchImages(keyword)),\r\n    onSetKeyword: keyword => dispatch(actions.setKeyword(keyword)),\r\n    onSaveQuery: () => dispatch(actions.saveQuery())\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatcToProps)(Search);\r\n","import * as actionTypes from \"./actionTypes\";\r\nimport axios from \"axios\";\r\n\r\nexport const setKeyword = keyword => {\r\n  return { type: actionTypes.SET_KEYWORD, keyword };\r\n};\r\n\r\nexport const fetchImagesStart = () => {\r\n  return { type: actionTypes.FETCH_IMAGES_START };\r\n};\r\nexport const fetchImages = images => {\r\n  return { type: actionTypes.FETCH_IMAGES_SUCCESS, images: images };\r\n};\r\nexport const fetchImagesFail = () => {\r\n  return { type: actionTypes.FETCH_IMAGES_FAIL };\r\n};\r\nexport const initFetchImages = keyword => {\r\n  return dispatch => {\r\n    const API_KEY = process.env.REACT_APP_API_KEY;\r\n    let url = `https://api.unsplash.com/search/photos?page=1&query=${keyword}&client_id=${API_KEY}`;\r\n    dispatch(fetchImagesStart());\r\n    axios\r\n      .get(url)\r\n      .then(response => {\r\n        if (response.data.results.length === 0 || keyword === \"\") {\r\n          dispatch(fetchImagesFail());\r\n        } else {\r\n          dispatch(fetchImages(response.data.results));\r\n        }\r\n      })\r\n      .catch(error => {\r\n        dispatch(fetchImagesFail(error));\r\n      });\r\n  };\r\n};\r\n\r\nexport const saveQuery = () => {\r\n  return { type: actionTypes.SAVE_QUERY };\r\n};\r\n\r\nexport const pressSavedQuerry = query => {\r\n  return { type: actionTypes.PRESS_SAVED_QUERY, query };\r\n};\r\nexport const showSavedQueryResult = photos => {\r\n  return { type: actionTypes.SHOW_SAVED_QUERY_RESULT, photos };\r\n};\r\nexport const fetchSavedQuery = query => {\r\n  return dispatch => {\r\n    const API_KEY = process.env.REACT_APP_API_KEY;\r\n    let url = `https://api.unsplash.com/search/photos?page=1&query=${query}&client_id=${API_KEY}`;\r\n    dispatch(fetchImagesStart());\r\n    axios\r\n      .get(url)\r\n      .then(response => {\r\n        dispatch(showSavedQueryResult(response.data.results));\r\n      })\r\n      .catch(error => {\r\n        dispatch(fetchImagesFail(error));\r\n      });\r\n  };\r\n};\r\n\r\nexport const leaveErrorMessage = () => {\r\n  return { type: actionTypes.LEAVE_ERROR_MESSAGE };\r\n};\r\n","export const SET_KEYWORD = \"SET_KEYWORD\";\r\n\r\nexport const FETCH_IMAGES_START = \"FETCH_IMAGES_START\";\r\nexport const FETCH_IMAGES_SUCCESS = \"FETCH_IMAGES_SUCCESS\";\r\nexport const FETCH_IMAGES_FAIL = \"FETCH_IMAGES_FAIL\";\r\n\r\nexport const SAVE_QUERY = \"SAVE_QUERY\";\r\n\r\nexport const PRESS_SAVED_QUERY = \"PRESS_SAVED_QUERY\";\r\nexport const SHOW_SAVED_QUERY_RESULT = \"SHOW_SAVED_QUERY_RESULT\";\r\n\r\nexport const LEAVE_ERROR_MESSAGE = \"LEAVE_ERROR_MESSAGE\";\r\n","import React from \"react\";\r\n\r\nconst Spinner = () => <div className=\"loader\">Loading...</div>;\r\n\r\nexport default Spinner;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport * as actions from \"../../store/actions\";\r\n\r\nconst Backdrop = props => (\r\n  <div className=\"Backdrop\" onClick={() => props.onLeaveErrorMessage()}></div>\r\n);\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onLeaveErrorMessage: () => dispatch(actions.leaveErrorMessage())\r\n  };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(Backdrop);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport Backdrop from \"./Backdrop\";\r\n\r\nconst ErrorWindow = props => {\r\n  return (\r\n    <div className=\"errorWindow\">\r\n      <Backdrop />\r\n      {props.keyword !== \"\" ? (\r\n        <p>There are no images with keyword: {props.keyword}</p>\r\n      ) : (\r\n        <p>Search field is emty</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    keyword: state.keyword,\r\n    error: state.error\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(ErrorWindow);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport Spinner from \"./UI/Spinner\";\r\nimport ErrorWindow from \"./error/ErrorWindow\";\r\n\r\nconst ResultGrid = props => {\r\n  let result = props.images.map(item => (\r\n    <div key={item.id} className=\"box\">\r\n      <a href={item.user.links.html} target=\"_blank\">\r\n        <img src={item.urls.regular} alt={item.alt_description} />\r\n      </a>\r\n      <p>Photographer: {item.user.name}</p>\r\n      {props.error ? <ErrorWindow /> : null}\r\n    </div>\r\n  ));\r\n  if (props.loading) {\r\n    result = <Spinner />;\r\n  }\r\n\r\n  return <div className=\"result-grid\">{result}</div>;\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    images: state.images,\r\n    loading: state.loading,\r\n    error: state.error\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(ResultGrid);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport * as actions from \"../store/actions\";\r\n\r\nconst SavedQueries = props => {\r\n  return (\r\n    <div className=\"saved-queries\">\r\n      <h2>Saved queries:</h2>\r\n      <ul>\r\n        {props.savedQueries.map(query => {\r\n          return (\r\n            <li key={query} onClick={() => props.onFetchSavedQuery(query)}>\r\n              {query}\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    savedQueries: state.savedQueries\r\n  };\r\n};\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onFetchSavedQuery: query => dispatch(actions.fetchSavedQuery(query))\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SavedQueries);\r\n","import React from \"react\";\n\nimport Search from \"./components/Search\";\nimport SearchResults from \"./components/SearchResult\";\nimport SavedQueries from \"./components/SavedQueries\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <h1>\n        Photos by{\" \"}\n        <a href=\"https://unsplash.com/\" target=\"_blank\">\n          Unsplash\n        </a>\n      </h1>\n      <Search />\n      <div className=\"photos\">\n        <SearchResults />\n        <SavedQueries />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const updateObject = (oldObject, valueToUpdate) => {\r\n  return {\r\n    ...oldObject,\r\n    ...valueToUpdate\r\n  };\r\n};\r\n","import * as actionTypes from \"../actions/actionTypes\";\r\nimport { updateObject } from \"../util\";\r\n\r\nconst initialState = {\r\n  keyword: \"CLIMB\",\r\n  images: [],\r\n  savedQueries: [],\r\n  loading: false,\r\n  error: false\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.SET_KEYWORD:\r\n      return updateObject(state, {\r\n        keyword: action.keyword.toUpperCase(),\r\n        error: false\r\n      });\r\n\r\n    case actionTypes.FETCH_IMAGES_START:\r\n      return updateObject(state, { loading: true, error: false });\r\n\r\n    case actionTypes.FETCH_IMAGES_SUCCESS:\r\n      return updateObject(state, {\r\n        images: action.images,\r\n        loading: false,\r\n        error: false\r\n      });\r\n\r\n    case actionTypes.FETCH_IMAGES_FAIL:\r\n      return updateObject(state, { loading: false, error: true });\r\n\r\n    case actionTypes.SAVE_QUERY:\r\n      if (state.keyword !== \"\") {\r\n        return updateObject(state, {\r\n          savedQueries: [...state.savedQueries, state.keyword],\r\n          keyword: \"\"\r\n        });\r\n      } else {\r\n        return state;\r\n      }\r\n\r\n    case actionTypes.SHOW_SAVED_QUERY_RESULT:\r\n      return updateObject(state, {\r\n        images: action.photos,\r\n        loading: false,\r\n        error: false,\r\n        keyword: \"\"\r\n      });\r\n\r\n    case actionTypes.LEAVE_ERROR_MESSAGE:\r\n      return updateObject(state, {\r\n        error: false,\r\n        keyword: \"\",\r\n        images: []\r\n      });\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createStore, compose, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport thunk from \"redux-thunk\";\n\nimport \"./styles/styles.css\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport reducer from \"./store/reducers/reducer\";\n\nconst composeEnhancers =\n  process.env.NODE_ENV === \"development\"\n    ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n    : null || compose;\n\nconst store = createStore(reducer, composeEnhancers(applyMiddleware(thunk)));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}